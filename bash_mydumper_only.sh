#!/bin/bash
# SCRIPT: bash_mydumper_only.sh
# AUTHOR: Ben Chambers
# DATE: September 2024
# VERSION: 1.00
# PLATFORM: Linux
# PURPOSE: This script takes a mydumper from the source IP, converts all MyISAM Tables to innodb,
# removes additional indexes, restores to seperate message db ready for conversion.


# High level steps:
# 1: Using a list as an input. Create a mydumper of all DB's being moved across to MES2019.
# 2: Convert any MyISAM tables to InnoDB.
# 3: Remove all additional indexes, leaving only the primary key to speed up restore.


# Prerequisites:
# 1: On the restore server, max_allowed_packet should match what the mydumper is configured to (below uses half of the maximum: )
# 2: Ensure filter lists are in place these should be in the format 'tables_<ip addr>.txt'

# Instructions:
# 1: Call script with source ip address and dump threads
# 2: Monitor log for any issues.
# 3: Verify 

# Example Invocation:
# sudo bash  bash_mydumper_only.sh.sh 10.100.23.101 6

# Changes / Notes:


# Variables:
#REG_USER="nico"
#REG_PASS=$(< /home/bchambers/.pass.txt)
#REG_USER_2019="reg_rw"
#REG_PASS_2019=$(< /home/bchambers/.pass_p.txt)

# Define source IP, destination IP and amount of threads to use for dump & restore. Also domain list number 1-5 (These are inputted by user)
SOURCE_IP="$1"
DUMP_THREADS="$2"

# Other variables
TARGET_DIR="/data/registry_move/inc_reg_migration"
TARGET_DIR="${TARGET_DIR}/${SOURCE_IP}"
LOGFILE="/data/registry_move/inc_reg_migration/${SOURCE_IP}_backup_and_restore_log.log"
# Table list must be full table location e.g 'db.table' don't use backticks.
# Swap new lines with commas
#TABLE_LIST=$(tr '\n' ',' < /home/bchambers/tables_$SOURCE_IP)
TABLE_LIST=$(tr -d '\r' < /home/bchambers/tables_$SOURCE_IP.txt | tr '\n' ',')

# Remove trailing comma generated by above
TABLE_LIST=$(echo "$TABLE_LIST" | sed 's/,$//')

STARTTIME="$(date '+%T')"

# Clear the output file
    > "$LOGFILE"

# Functions:
#function for initial dumper to dump and restore all tables
mydumper_func(){



    # MyDumper Dump, comment out --where if using config file
    mydumper --threads "$DUMP_THREADS" \
    --host "$SOURCE_IP" \
    --defaults-file /home/bchambers/.mydumper_no_where \
    --database message \
    --tables-list="$TABLE_LIST" \
    --verbose 3 \
    --long-query-guard 999999 \
    --statement-size=536870912 \
    --clear \
    --no-locks \
    --events \
    --routines \
    --insert-ignore \
    --compress-protocol \
    --where="date >= '2024-09-14'" \
    --outputdir "$TARGET_DIR" >> "$LOGFILE" 2>&1;
   
   
    # Convert any tables which are myisam to innodb before restore

    sed -i 's/ENGINE=MyISAM/ENGINE=InnoDB/g' "$TARGET_DIR"/*-schema.sql
    sed -i 's/PRIMARY KEY (`emailid`),/PRIMARY KEY (`emailid`)/g' "$TARGET_DIR"/*-schema.sql

    # Loop through each SQL file in the directory
    for file in "$TARGET_DIR"/*-schema.sql; do
        # Use sed to remove lines containing secondary indexes
        sed -i '/^  KEY `/d' "$file"
    done
}

# Make target dir
mkdir "$TARGET_DIR"
echo "$TABLE_LIST"
# Convert domain list to escaped domains, parse this for domains being moved.

# Parsed list for DB's now generated, commence mydumper
# Call function that executes mydumper
if mydumper_func; then
    # Proceed to run myloader
    echo "$(date '+%F %T'): Tables successfully dumped." | tee -a "$LOGFILE"

else
    # Error message generated if mydumper unable to be run
    echo "$(date '+%F %T'): Unable to run mydumper, exiting" | tee -a "$LOGFILE"
    exit 1
fi

# All steps now complete, clearing dump data and logging time taken.

# rm -rf "$TARGET_DIR"

ENDTIME="$(date '+%T')"
echo -e "-------------------------------\n\n"
echo "$(date '+%F %T'): Script start time = '$STARTTIME'"| tee -a "$LOGFILE"
echo "$(date '+%F %T'): Script finish time = '$ENDTIME'"| tee -a "$LOGFILE"

        # Convert STARTTIME and ENDTIME to seconds since the epoch
        START_SECONDS=$(date -d "$STARTTIME" +%s)
        END_SECONDS=$(date -d "$ENDTIME" +%s)

        # Calculate the total migration time in seconds
        TOTAL_SECONDS=$((END_SECONDS - START_SECONDS))

        # Convert total seconds to hours, minutes, and seconds
        TOTAL_TIME=$(printf '%02d:%02d:%02d' $((TOTAL_SECONDS/3600)) $((TOTAL_SECONDS%3600/60)) $((TOTAL_SECONDS%60)))

echo "$(date '+%F %T'): Total runtime for script= '$TOTAL_TIME'" | tee -a "$LOGFILE"
exit 0
